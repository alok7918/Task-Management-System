{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import axios from \"axios\";\n// import \"./priorList.css\";\n\n// const PriorityList = () => {\n//   const [taskData, setTaskData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const response = await axios.get(\"http://localhost:8000/task/Display\");\n//         setTaskData(response.data);\n//         localStorage.setItem(\"taskData\", JSON.stringify(response.data));\n//       } catch (error) {\n//         console.error(\"Error fetching task data:\", error);\n//         // Handle error (e.g., show a message to the user)\n//       }\n//     };\n\n//     fetchData();\n//   }, []);\n\n//   const onDragStart = (event, task) => {\n//     event.dataTransfer.setData(\"task\", JSON.stringify(task));\n//   };\n\n//   const onDragOver = (event) => {\n//     event.preventDefault();\n//   };\n\n//   // const onDrop = (event, priority) => {\n//   //   event.preventDefault();\n//   //   const task = JSON.parse(event.dataTransfer.getData(\"task\"));\n//   //   const updatedTaskData = taskData.map((t) =>\n//   //     t.title === task.title && t.description === task.description\n//   //       ? { ...t, priority }\n//   //       : t\n//   //   );\n//   //   setTaskData(updatedTaskData);\n//   //   localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\n//   //   axios\n//   //     .put(`http://localhost:8000/task/${task._id}`, { priority })\n//   //     .then((res) => {\n//   //       console.log(\"Task priority updated successfully:\", res.data);\n//   //     })\n//   //     .catch((error) => {\n//   //       console.error(\"Error updating task priority:\", error);\n//   //       // Handle error (e.g., show a message to the user)\n//   //     });\n//   // };\n\n//   const onDrop = (event, priority) => {\n//     event.preventDefault();\n//     const task = JSON.parse(event.dataTransfer.getData(\"task\"));\n//     const originalPriority = task.priority;\n\n//     if (originalPriority !== priority) {\n//       // Move task to a different priority level\n//       const updatedTaskData = taskData.map((t) =>\n//         t.title === task.title && t.description === task.description\n//           ? { ...t, priority }\n//           : t\n//       );\n//       setTaskData(updatedTaskData);\n//       localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\n//       axios\n//         .put(`http://localhost:8000/task/${task._id}`, { priority })\n//         .then((res) => {\n//           console.log(\"Task priority updated successfully:\", res.data);\n//         })\n//         .catch((error) => {\n//           console.error(\"Error updating task priority:\", error);\n//           // Handle error (e.g., show a message to the user)\n//         });\n//     } else {\n//       // Move task within the same priority level\n//       const updatedTaskData = [...taskData];\n//       const removedTaskIndex = updatedTaskData.findIndex((t) => t.title === task.title && t.description === task.description);\n//       const removedTask = updatedTaskData.splice(removedTaskIndex, 1)[0];\n//       const dropIndex = updatedTaskData.findIndex((t) => t.priority === priority);\n//       updatedTaskData.splice(dropIndex, 0, removedTask);\n//       setTaskData(updatedTaskData);\n//       localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\n//     }\n//   };\n\n//   const renderTasksByPriority = (priority) =>\n//     taskData\n//       .filter((task) => task.priority === priority)\n//       .map((task, index) => (\n//         <div\n//           key={index}\n//           draggable\n//           onDragStart={(event) => onDragStart(event, task)}\n//           className=\"task\"\n//         >\n//           <span>{task.title}</span>\n//           <span>{task.description}</span>\n//         </div>\n//       ));\n\n//   return (\n//     <div className=\"priority\">\n//       <div\n//         className=\"prioritybox\"\n//         onDragOver={onDragOver}\n//         onDrop={(event) => onDrop(event, \"High\")}\n//       >\n//         <h1>High Priority</h1>\n//         {renderTasksByPriority(\"High\")}\n//       </div>\n//       <div\n//         className=\"prioritybox\"\n//         onDragOver={onDragOver}\n//         onDrop={(event) => onDrop(event, \"Medium\")}\n//       >\n//         <h1>Medium Priority</h1>\n//         {renderTasksByPriority(\"Medium\")}\n//       </div>\n//       <div\n//         className=\"prioritybox\"\n//         onDragOver={onDragOver}\n//         onDrop={(event) => onDrop(event, \"Low\")}\n//       >\n//         <h1>Low Priority</h1>\n//         {renderTasksByPriority(\"Low\")}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default PriorityList;","map":{"version":3,"names":[],"sources":["D:/Task Management System/frontend/src/Components/priorList.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import \"./priorList.css\";\r\n\r\n// const PriorityList = () => {\r\n//   const [taskData, setTaskData] = useState([]);\r\n\r\n//   useEffect(() => {\r\n//     const fetchData = async () => {\r\n//       try {\r\n//         const response = await axios.get(\"http://localhost:8000/task/Display\");\r\n//         setTaskData(response.data);\r\n//         localStorage.setItem(\"taskData\", JSON.stringify(response.data));\r\n//       } catch (error) {\r\n//         console.error(\"Error fetching task data:\", error);\r\n//         // Handle error (e.g., show a message to the user)\r\n//       }\r\n//     };\r\n\r\n//     fetchData();\r\n//   }, []);\r\n\r\n//   const onDragStart = (event, task) => {\r\n//     event.dataTransfer.setData(\"task\", JSON.stringify(task));\r\n//   };\r\n\r\n//   const onDragOver = (event) => {\r\n//     event.preventDefault();\r\n//   };\r\n\r\n//   // const onDrop = (event, priority) => {\r\n//   //   event.preventDefault();\r\n//   //   const task = JSON.parse(event.dataTransfer.getData(\"task\"));\r\n//   //   const updatedTaskData = taskData.map((t) =>\r\n//   //     t.title === task.title && t.description === task.description\r\n//   //       ? { ...t, priority }\r\n//   //       : t\r\n//   //   );\r\n//   //   setTaskData(updatedTaskData);\r\n//   //   localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\r\n//   //   axios\r\n//   //     .put(`http://localhost:8000/task/${task._id}`, { priority })\r\n//   //     .then((res) => {\r\n//   //       console.log(\"Task priority updated successfully:\", res.data);\r\n//   //     })\r\n//   //     .catch((error) => {\r\n//   //       console.error(\"Error updating task priority:\", error);\r\n//   //       // Handle error (e.g., show a message to the user)\r\n//   //     });\r\n//   // };\r\n\r\n\r\n//   const onDrop = (event, priority) => {\r\n//     event.preventDefault();\r\n//     const task = JSON.parse(event.dataTransfer.getData(\"task\"));\r\n//     const originalPriority = task.priority;\r\n  \r\n//     if (originalPriority !== priority) {\r\n//       // Move task to a different priority level\r\n//       const updatedTaskData = taskData.map((t) =>\r\n//         t.title === task.title && t.description === task.description\r\n//           ? { ...t, priority }\r\n//           : t\r\n//       );\r\n//       setTaskData(updatedTaskData);\r\n//       localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\r\n//       axios\r\n//         .put(`http://localhost:8000/task/${task._id}`, { priority })\r\n//         .then((res) => {\r\n//           console.log(\"Task priority updated successfully:\", res.data);\r\n//         })\r\n//         .catch((error) => {\r\n//           console.error(\"Error updating task priority:\", error);\r\n//           // Handle error (e.g., show a message to the user)\r\n//         });\r\n//     } else {\r\n//       // Move task within the same priority level\r\n//       const updatedTaskData = [...taskData];\r\n//       const removedTaskIndex = updatedTaskData.findIndex((t) => t.title === task.title && t.description === task.description);\r\n//       const removedTask = updatedTaskData.splice(removedTaskIndex, 1)[0];\r\n//       const dropIndex = updatedTaskData.findIndex((t) => t.priority === priority);\r\n//       updatedTaskData.splice(dropIndex, 0, removedTask);\r\n//       setTaskData(updatedTaskData);\r\n//       localStorage.setItem(\"taskData\", JSON.stringify(updatedTaskData));\r\n//     }\r\n//   };\r\n  \r\n\r\n\r\n\r\n//   const renderTasksByPriority = (priority) =>\r\n//     taskData\r\n//       .filter((task) => task.priority === priority)\r\n//       .map((task, index) => (\r\n//         <div\r\n//           key={index}\r\n//           draggable\r\n//           onDragStart={(event) => onDragStart(event, task)}\r\n//           className=\"task\"\r\n//         >\r\n//           <span>{task.title}</span>\r\n//           <span>{task.description}</span>\r\n//         </div>\r\n//       ));\r\n\r\n//   return (\r\n//     <div className=\"priority\">\r\n//       <div\r\n//         className=\"prioritybox\"\r\n//         onDragOver={onDragOver}\r\n//         onDrop={(event) => onDrop(event, \"High\")}\r\n//       >\r\n//         <h1>High Priority</h1>\r\n//         {renderTasksByPriority(\"High\")}\r\n//       </div>\r\n//       <div\r\n//         className=\"prioritybox\"\r\n//         onDragOver={onDragOver}\r\n//         onDrop={(event) => onDrop(event, \"Medium\")}\r\n//       >\r\n//         <h1>Medium Priority</h1>\r\n//         {renderTasksByPriority(\"Medium\")}\r\n//       </div>\r\n//       <div\r\n//         className=\"prioritybox\"\r\n//         onDragOver={onDragOver}\r\n//         onDrop={(event) => onDrop(event, \"Low\")}\r\n//       >\r\n//         <h1>Low Priority</h1>\r\n//         {renderTasksByPriority(\"Low\")}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default PriorityList;\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n"],"mappings":"AAAA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
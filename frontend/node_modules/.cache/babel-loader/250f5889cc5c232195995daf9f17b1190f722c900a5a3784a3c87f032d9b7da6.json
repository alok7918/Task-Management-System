{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task Management System\\\\frontend\\\\src\\\\Components\\\\Display.js\";\n// import { useState,useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// const Display=()=>{\n\n//   const mynav=useNavigate()\n//   const[taskData,setTaskData]=useState([])\n\n//   const [currentPage,setCurrentPage]= useState(1);\n//   const recordsperPage=5;\n//   const lastIndex = currentPage * recordsperPage;\n//   const firstIndex= lastIndex - recordsperPage;\n//   const records= taskData.slice(firstIndex,lastIndex);\n//   const npage= Math.ceil(taskData.length / recordsperPage);\n\n//   const numbers= [...Array(npage + 1).keys()].slice(1);\n\n//   const prevPage=()=>{\n//     if(currentPage!== 1){\n//       setCurrentPage(currentPage-1);\n//     }\n//   }\n\n//   const nextPage=()=>{\n//     if(currentPage!== npage){\n//       setCurrentPage(currentPage+1);\n//     }\n//   }\n\n//   const changeCPage=(id)=>{\n//     setCurrentPage(id);\n//   }\n\n//   const loadData=()=>{\n//           axios.get(\"http://localhost:8000/task/Display\").then((res)=>{\n//           setTaskData(res.data)\n//           })\n//   }\n\n//       useEffect(()=>{\n//           loadData()\n//       },[])\n\n//       const handleToggleStatus = async (id, status) => {\n//           try {\n//             const newStatus = status === 'pending' ? 'completed': 'pending';\n//             const updatedTodo = await axios.put(`http://localhost:8000/task/Display/${id}`, { status: newStatus });\n//             setTaskData(taskData.map(todo => (todo._id === id ? updatedTodo.data : todo)));\n//           } catch (error) {\n//             console.error(error);\n//           }\n//         };\n\n//         const del = (id) => {\n\n//           const confirmDelete = window.confirm(\"Are you sure you want to delete this item?\");\n\n//           if (confirmDelete) {\n\n//               const url = \"http://localhost:8000/task/Delete\";\n\n//               axios.post(url, { id: id })\n//                   .then((res) => {\n\n//                       loadData();\n//                   })\n//                   .catch((error) => {\n//                       console.error(\"Error deleting item:\", error);\n//                   });\n//           }\n//       };\n\n//       const edit=(id)=>{\n\n//           mynav(\"/edit/\"+id); \n\n//       }    \n\n//         const descriptionHere = ( description,date, descriptiondetail ) => {\n//       mynav(`/Des/${description}/${date}/${descriptiondetail}`);\n//     };\n\n//   const mydata=records.map((key, index) => {\n\n//     return(\n//       <>\n\n//                     <tbody>\n//                       <tr>\n\n//                         <td> { key.title}</td>\n//                         <td  onClick={()=>descriptionHere(key.description, key.date, key.descriptiondetail)}>{key.description}</td>\n//                         <td> {key.date}</td>\n\n//                         <td> \n//                         <div style={{display:\"flex\"}} >\n//                          {key.status}\n//                           <button  onClick={() => handleToggleStatus(key._id, key.status)} class=\"button\" style={{\"--clr\": \"#00ad54\"}}>\n//                                   <span ></span>\n//                                   <div >\n//                                       <div >\n//                                       <i  ></i>\n//                                       </div>\n//                                       <span>Status</span>\n//                                   </div>\n//                               </button>\n//                           </div></td>\n//                       <td><button onClick={()=>{edit(key._id)}} ><i  style={{color: \"#000000\"}}></i></button></td>\n//                       <td><button onClick={()=>{del(key._id)}}><i  style={{color: \"#000000\"}}></i></button></td>\n\n//                   </tr>\n\n//               </tbody>\n\n//       </>\n//     )\n\n//   })\n\n//       return(\n//           <>\n//           <center>\n//             <h1  >Assigned Tasks</h1> </center>\n//             <div  >\n//                 <div  style={{width:\"80%\",margin:\"auto\"}}>\n\n//                         <table class=\"table\">\n//                             <thead style={{color:\"white\",backgroundColor:\"#212529\"}}>\n//                                 <tr>\n//                                 <th>Title</th>\n//                                 <th style={{width:\" 150px\",height: \"40px\"}}>description</th>\n//                                 <th>date</th>\n//                                 <th>status</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n//                                 </tr>\n//                             </thead>\n//                       {mydata}   \n//               </table>\n\n//                       <nav>\n//                         <ul className=\"pagination\">\n//                             <li className=\"page-item\">\n//                                 <a href=\"#\" className=\"page-link\" onClick={prevPage}>Prev</a>\n//                             </li>\n//                             {\n//                               numbers.map((n,i)=>(\n//                                 <li className={`page-item ${currentPage===n ? 'active':''}`} key={i}>\n//                                     <a href=\"#\" className=\"page-link\" onClick={()=>{changeCPage(n)}} >{n}</a>\n//                                 </li>\n//                               ))\n//                             }\n//                             <li className=\"page-item\">\n//                                 <a href=\"#\" className=\"page-link\" onClick={nextPage}>Next</a>\n//                             </li>\n//                         </ul>\n//                       </nav>\n//               </div>\n//             </div>\n\n//                   <div style={{margin:\"100px\",padding:\"20px\"}}> \n\n//                   </div>\n\n//   </> \n// )}       \n\n// export default Display;\n\nimport * as React from 'react';\nimport { DataGrid } from '@mui/x-data-grid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  field: 'id',\n  headerName: 'ID',\n  width: 70\n}, {\n  field: 'firstName',\n  headerName: 'First name',\n  width: 130\n}, {\n  field: 'lastName',\n  headerName: 'Last name',\n  width: 130\n}, {\n  field: 'age',\n  headerName: 'Age',\n  type: 'number',\n  width: 90\n}, {\n  field: 'fullName',\n  headerName: 'Full name',\n  description: 'This column has a value getter and is not sortable.',\n  sortable: false,\n  width: 160,\n  valueGetter: (value, row) => `${row.firstName || ''} ${row.lastName || ''}`\n}];\nconst rows = [{\n  id: 1,\n  lastName: 'Snow',\n  firstName: 'Jon',\n  age: 35\n}, {\n  id: 2,\n  lastName: 'Lannister',\n  firstName: 'Cersei',\n  age: 42\n}, {\n  id: 3,\n  lastName: 'Lannister',\n  firstName: 'Jaime',\n  age: 45\n}, {\n  id: 4,\n  lastName: 'Stark',\n  firstName: 'Arya',\n  age: 16\n}, {\n  id: 5,\n  lastName: 'Targaryen',\n  firstName: 'Daenerys',\n  age: null\n}, {\n  id: 6,\n  lastName: 'Melisandre',\n  firstName: null,\n  age: 150\n}, {\n  id: 7,\n  lastName: 'Clifford',\n  firstName: 'Ferrara',\n  age: 44\n}, {\n  id: 8,\n  lastName: 'Frances',\n  firstName: 'Rossini',\n  age: 36\n}, {\n  id: 9,\n  lastName: 'Roxie',\n  firstName: 'Harvey',\n  age: 65\n}];\nexport default function DataTable() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: 400,\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(DataGrid, {\n      rows: rows,\n      columns: columns,\n      initialState: {\n        pagination: {\n          paginationModel: {\n            page: 0,\n            pageSize: 5\n          }\n        }\n      },\n      pageSizeOptions: [5, 10],\n      checkboxSelection: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 236,\n    columnNumber: 5\n  }, this);\n}\n_c = DataTable;\nvar _c;\n$RefreshReg$(_c, \"DataTable\");","map":{"version":3,"names":["React","DataGrid","jsxDEV","_jsxDEV","columns","field","headerName","width","type","description","sortable","valueGetter","value","row","firstName","lastName","rows","id","age","DataTable","style","height","children","initialState","pagination","paginationModel","page","pageSize","pageSizeOptions","checkboxSelection","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/Task Management System/frontend/src/Components/Display.js"],"sourcesContent":["// import { useState,useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\"\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// const Display=()=>{\r\n\r\n//   const mynav=useNavigate()\r\n//   const[taskData,setTaskData]=useState([])\r\n\r\n\r\n\r\n//   const [currentPage,setCurrentPage]= useState(1);\r\n//   const recordsperPage=5;\r\n//   const lastIndex = currentPage * recordsperPage;\r\n//   const firstIndex= lastIndex - recordsperPage;\r\n//   const records= taskData.slice(firstIndex,lastIndex);\r\n//   const npage= Math.ceil(taskData.length / recordsperPage);\r\n\r\n//   const numbers= [...Array(npage + 1).keys()].slice(1);\r\n\r\n\r\n\r\n//   const prevPage=()=>{\r\n//     if(currentPage!== 1){\r\n//       setCurrentPage(currentPage-1);\r\n//     }\r\n//   }\r\n\r\n\r\n//   const nextPage=()=>{\r\n//     if(currentPage!== npage){\r\n//       setCurrentPage(currentPage+1);\r\n//     }\r\n//   }\r\n\r\n\r\n//   const changeCPage=(id)=>{\r\n//     setCurrentPage(id);\r\n//   }\r\n\r\n\r\n\r\n\r\n//   const loadData=()=>{\r\n//           axios.get(\"http://localhost:8000/task/Display\").then((res)=>{\r\n//           setTaskData(res.data)\r\n//           })\r\n//   }\r\n\r\n//       useEffect(()=>{\r\n//           loadData()\r\n//       },[])\r\n\r\n      \r\n\r\n//       const handleToggleStatus = async (id, status) => {\r\n//           try {\r\n//             const newStatus = status === 'pending' ? 'completed': 'pending';\r\n//             const updatedTodo = await axios.put(`http://localhost:8000/task/Display/${id}`, { status: newStatus });\r\n//             setTaskData(taskData.map(todo => (todo._id === id ? updatedTodo.data : todo)));\r\n//           } catch (error) {\r\n//             console.error(error);\r\n//           }\r\n//         };\r\n\r\n\r\n//         const del = (id) => {\r\n        \r\n//           const confirmDelete = window.confirm(\"Are you sure you want to delete this item?\");\r\n      \r\n          \r\n//           if (confirmDelete) {\r\n              \r\n//               const url = \"http://localhost:8000/task/Delete\";\r\n              \r\n              \r\n//               axios.post(url, { id: id })\r\n//                   .then((res) => {\r\n                      \r\n//                       loadData();\r\n//                   })\r\n//                   .catch((error) => {\r\n//                       console.error(\"Error deleting item:\", error);\r\n//                   });\r\n//           }\r\n//       };\r\n      \r\n      \r\n      \r\n//       const edit=(id)=>{\r\n      \r\n//           mynav(\"/edit/\"+id); \r\n      \r\n//       }    \r\n\r\n//         const descriptionHere = ( description,date, descriptiondetail ) => {\r\n//       mynav(`/Des/${description}/${date}/${descriptiondetail}`);\r\n//     };\r\n      \r\n\r\n//   const mydata=records.map((key, index) => {\r\n\r\n//     return(\r\n//       <>\r\n          \r\n          \r\n              \r\n//                     <tbody>\r\n//                       <tr>\r\n                        \r\n//                         <td> { key.title}</td>\r\n//                         <td  onClick={()=>descriptionHere(key.description, key.date, key.descriptiondetail)}>{key.description}</td>\r\n//                         <td> {key.date}</td>\r\n                      \r\n//                         <td> \r\n//                         <div style={{display:\"flex\"}} >\r\n//                          {key.status}\r\n//                           <button  onClick={() => handleToggleStatus(key._id, key.status)} class=\"button\" style={{\"--clr\": \"#00ad54\"}}>\r\n//                                   <span ></span>\r\n//                                   <div >\r\n//                                       <div >\r\n//                                       <i  ></i>\r\n//                                       </div>\r\n//                                       <span>Status</span>\r\n//                                   </div>\r\n//                               </button>\r\n//                           </div></td>\r\n//                       <td><button onClick={()=>{edit(key._id)}} ><i  style={{color: \"#000000\"}}></i></button></td>\r\n//                       <td><button onClick={()=>{del(key._id)}}><i  style={{color: \"#000000\"}}></i></button></td>\r\n                \r\n//                   </tr>\r\n                  \r\n//               </tbody>\r\n            \r\n      \r\n    \r\n//       </>\r\n//     )\r\n    \r\n//   })\r\n\r\n\r\n      \r\n\r\n//       return(\r\n//           <>\r\n//           <center>\r\n//             <h1  >Assigned Tasks</h1> </center>\r\n//             <div  >\r\n//                 <div  style={{width:\"80%\",margin:\"auto\"}}>\r\n                  \r\n//                         <table class=\"table\">\r\n//                             <thead style={{color:\"white\",backgroundColor:\"#212529\"}}>\r\n//                                 <tr>\r\n//                                 <th>Title</th>\r\n//                                 <th style={{width:\" 150px\",height: \"40px\"}}>description</th>\r\n//                                 <th>date</th>\r\n//                                 <th>status</th>\r\n//                                 <th>Edit</th>\r\n//                                 <th>Delete</th>\r\n//                                 </tr>\r\n//                             </thead>\r\n//                       {mydata}   \r\n//               </table>\r\n          \r\n\r\n//                       <nav>\r\n//                         <ul className=\"pagination\">\r\n//                             <li className=\"page-item\">\r\n//                                 <a href=\"#\" className=\"page-link\" onClick={prevPage}>Prev</a>\r\n//                             </li>\r\n//                             {\r\n//                               numbers.map((n,i)=>(\r\n//                                 <li className={`page-item ${currentPage===n ? 'active':''}`} key={i}>\r\n//                                     <a href=\"#\" className=\"page-link\" onClick={()=>{changeCPage(n)}} >{n}</a>\r\n//                                 </li>\r\n//                               ))\r\n//                             }\r\n//                             <li className=\"page-item\">\r\n//                                 <a href=\"#\" className=\"page-link\" onClick={nextPage}>Next</a>\r\n//                             </li>\r\n//                         </ul>\r\n//                       </nav>\r\n//               </div>\r\n//             </div>\r\n            \r\n//                   <div style={{margin:\"100px\",padding:\"20px\"}}> \r\n                          \r\n//                   </div>\r\n            \r\n           \r\n\r\n//   </> \r\n// )}       \r\n\r\n// export default Display;\r\n\r\n\r\nimport * as React from 'react';\r\nimport { DataGrid } from '@mui/x-data-grid';\r\n\r\nconst columns = [\r\n  { field: 'id', headerName: 'ID', width: 70 },\r\n  { field: 'firstName', headerName: 'First name', width: 130 },\r\n  { field: 'lastName', headerName: 'Last name', width: 130 },\r\n  {\r\n    field: 'age',\r\n    headerName: 'Age',\r\n    type: 'number',\r\n    width: 90,\r\n  },\r\n  {\r\n    field: 'fullName',\r\n    headerName: 'Full name',\r\n    description: 'This column has a value getter and is not sortable.',\r\n    sortable: false,\r\n    width: 160,\r\n    valueGetter: (value, row) => `${row.firstName || ''} ${row.lastName || ''}`,\r\n  },\r\n];\r\n\r\nconst rows = [\r\n  { id: 1, lastName: 'Snow', firstName: 'Jon', age: 35 },\r\n  { id: 2, lastName: 'Lannister', firstName: 'Cersei', age: 42 },\r\n  { id: 3, lastName: 'Lannister', firstName: 'Jaime', age: 45 },\r\n  { id: 4, lastName: 'Stark', firstName: 'Arya', age: 16 },\r\n  { id: 5, lastName: 'Targaryen', firstName: 'Daenerys', age: null },\r\n  { id: 6, lastName: 'Melisandre', firstName: null, age: 150 },\r\n  { id: 7, lastName: 'Clifford', firstName: 'Ferrara', age: 44 },\r\n  { id: 8, lastName: 'Frances', firstName: 'Rossini', age: 36 },\r\n  { id: 9, lastName: 'Roxie', firstName: 'Harvey', age: 65 },\r\n];\r\n\r\nexport default function DataTable() {\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n      <DataGrid\r\n        rows={rows}\r\n        columns={columns}\r\n        initialState={{\r\n          pagination: {\r\n            paginationModel: { page: 0, pageSize: 5 },\r\n          },\r\n        }}\r\n        pageSizeOptions={[5, 10]}\r\n        checkboxSelection\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
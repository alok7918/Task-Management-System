{"ast":null,"code":"var _jsxFileName = \"D:\\\\Task Management System\\\\frontend\\\\src\\\\Components\\\\Display.js\",\n  _s = $RefreshSig$();\n// import { useState,useEffect } from \"react\";\n// import axios from \"axios\";\n// import { useNavigate } from \"react-router-dom\"\n// import 'bootstrap/dist/css/bootstrap.min.css';\n// const Display=()=>{\n\n//   const mynav=useNavigate()\n//   const[taskData,setTaskData]=useState([])\n\n//   const [currentPage,setCurrentPage]= useState(1);\n//   const recordsperPage=5;\n//   const lastIndex = currentPage * recordsperPage;\n//   const firstIndex= lastIndex - recordsperPage;\n//   const records= taskData.slice(firstIndex,lastIndex);\n//   const npage= Math.ceil(taskData.length / recordsperPage);\n\n//   const numbers= [...Array(npage + 1).keys()].slice(1);\n\n//   const prevPage=()=>{\n//     if(currentPage!== 1){\n//       setCurrentPage(currentPage-1);\n//     }\n//   }\n\n//   const nextPage=()=>{\n//     if(currentPage!== npage){\n//       setCurrentPage(currentPage+1);\n//     }\n//   }\n\n//   const changeCPage=(id)=>{\n//     setCurrentPage(id);\n//   }\n\n//   const loadData=()=>{\n//           axios.get(\"http://localhost:8000/task/Display\").then((res)=>{\n//           setTaskData(res.data)\n//           })\n//   }\n\n//       useEffect(()=>{\n//           loadData()\n//       },[])\n\n//       const handleToggleStatus = async (id, status) => {\n//           try {\n//             const newStatus = status === 'pending' ? 'completed': 'pending';\n//             const updatedTodo = await axios.put(`http://localhost:8000/task/Display/${id}`, { status: newStatus });\n//             setTaskData(taskData.map(todo => (todo._id === id ? updatedTodo.data : todo)));\n//           } catch (error) {\n//             console.error(error);\n//           }\n//         };\n\n//         const del = (id) => {\n\n//           const confirmDelete = window.confirm(\"Are you sure you want to delete this item?\");\n\n//           if (confirmDelete) {\n\n//               const url = \"http://localhost:8000/task/Delete\";\n\n//               axios.post(url, { id: id })\n//                   .then((res) => {\n\n//                       loadData();\n//                   })\n//                   .catch((error) => {\n//                       console.error(\"Error deleting item:\", error);\n//                   });\n//           }\n//       };\n\n//       const edit=(id)=>{\n\n//           mynav(\"/edit/\"+id); \n\n//       }    \n\n//         const descriptionHere = ( description,date, descriptiondetail ) => {\n//       mynav(`/Des/${description}/${date}/${descriptiondetail}`);\n//     };\n\n//   const mydata=records.map((key, index) => {\n\n//     return(\n//       <>\n\n//                     <tbody>\n//                       <tr>\n\n//                         <td> { key.title}</td>\n//                         <td  onClick={()=>descriptionHere(key.description, key.date, key.descriptiondetail)}>{key.description}</td>\n//                         <td> {key.date}</td>\n\n//                         <td> \n//                         <div style={{display:\"flex\"}} >\n//                          {key.status}\n//                           <button  onClick={() => handleToggleStatus(key._id, key.status)} class=\"button\" style={{\"--clr\": \"#00ad54\"}}>\n//                                   <span ></span>\n//                                   <div >\n//                                       <div >\n//                                       <i  ></i>\n//                                       </div>\n//                                       <span>Status</span>\n//                                   </div>\n//                               </button>\n//                           </div></td>\n//                       <td><button onClick={()=>{edit(key._id)}} ><i  style={{color: \"#000000\"}}></i></button></td>\n//                       <td><button onClick={()=>{del(key._id)}}><i  style={{color: \"#000000\"}}></i></button></td>\n\n//                   </tr>\n\n//               </tbody>\n\n//       </>\n//     )\n\n//   })\n\n//       return(\n//           <>\n//           <center>\n//             <h1  >Assigned Tasks</h1> </center>\n//             <div  >\n//                 <div  style={{width:\"80%\",margin:\"auto\"}}>\n\n//                         <table class=\"table\">\n//                             <thead style={{color:\"white\",backgroundColor:\"#212529\"}}>\n//                                 <tr>\n//                                 <th>Title</th>\n//                                 <th style={{width:\" 150px\",height: \"40px\"}}>description</th>\n//                                 <th>date</th>\n//                                 <th>status</th>\n//                                 <th>Edit</th>\n//                                 <th>Delete</th>\n//                                 </tr>\n//                             </thead>\n//                       {mydata}   \n//               </table>\n\n//                       <nav>\n//                         <ul className=\"pagination\">\n//                             <li className=\"page-item\">\n//                                 <a href=\"#\" className=\"page-link\" onClick={prevPage}>Prev</a>\n//                             </li>\n//                             {\n//                               numbers.map((n,i)=>(\n//                                 <li className={`page-item ${currentPage===n ? 'active':''}`} key={i}>\n//                                     <a href=\"#\" className=\"page-link\" onClick={()=>{changeCPage(n)}} >{n}</a>\n//                                 </li>\n//                               ))\n//                             }\n//                             <li className=\"page-item\">\n//                                 <a href=\"#\" className=\"page-link\" onClick={nextPage}>Next</a>\n//                             </li>\n//                         </ul>\n//                       </nav>\n//               </div>\n//             </div>\n\n//                   <div style={{margin:\"100px\",padding:\"20px\"}}> \n\n//                   </div>\n\n//   </> \n// )}       \n\n// export default Display;\n\nimport * as React from 'react';\nimport Paper from '@mui/material/Paper';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  id: 'name',\n  label: 'Name',\n  minWidth: 170\n}, {\n  id: 'code',\n  label: 'ISO\\u00a0Code',\n  minWidth: 100\n}, {\n  id: 'population',\n  label: 'Population',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'size',\n  label: 'Size\\u00a0(km\\u00b2)',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toLocaleString('en-US')\n}, {\n  id: 'density',\n  label: 'Density',\n  minWidth: 170,\n  align: 'right',\n  format: value => value.toFixed(2)\n}];\nfunction createData(name, code, population, size) {\n  const density = population / size;\n  return {\n    name,\n    code,\n    population,\n    size,\n    density\n  };\n}\nconst rows = [createData('India', 'IN', 1324171354, 3287263), createData('China', 'CN', 1403500365, 9596961), createData('Italy', 'IT', 60483973, 301340), createData('United States', 'US', 327167434, 9833520), createData('Canada', 'CA', 37602103, 9984670), createData('Australia', 'AU', 25475400, 7692024), createData('Germany', 'DE', 83019200, 357578), createData('Ireland', 'IE', 4857000, 70273), createData('Mexico', 'MX', 126577691, 1972550), createData('Japan', 'JP', 126317000, 377973), createData('France', 'FR', 67022000, 640679), createData('United Kingdom', 'GB', 67545757, 242495), createData('Russia', 'RU', 146793744, 17098246), createData('Nigeria', 'NG', 200962417, 923768), createData('Brazil', 'BR', 210147125, 8515767)];\nexport default function ColumnGroupingTable() {\n  _s();\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(+event.target.value);\n    setPage(0);\n  };\n  return /*#__PURE__*/_jsxDEV(Paper, {\n    sx: {\n      width: '100%'\n    },\n    children: [/*#__PURE__*/_jsxDEV(TableContainer, {\n      sx: {\n        maxHeight: 440\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        stickyHeader: true,\n        \"aria-label\": \"sticky table\",\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: columns.map(column => /*#__PURE__*/_jsxDEV(TableCell, {\n              align: column.align,\n              style: {\n                top: 57,\n                minWidth: column.minWidth\n              },\n              children: column.label\n            }, column.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 279,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage).map(row => {\n            return /*#__PURE__*/_jsxDEV(TableRow, {\n              hover: true,\n              role: \"checkbox\",\n              tabIndex: -1,\n              children: columns.map(column => {\n                const value = row[column.id];\n                return /*#__PURE__*/_jsxDEV(TableCell, {\n                  align: column.align,\n                  children: column.format && typeof value === 'number' ? column.format(value) : value\n                }, column.id, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 298,\n                  columnNumber: 25\n                }, this);\n              })\n            }, row.code, false, {\n              fileName: _jsxFileName,\n              lineNumber: 294,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TablePagination, {\n      rowsPerPageOptions: [5, 25, 100],\n      component: \"div\",\n      count: rows.length,\n      rowsPerPage: rowsPerPage,\n      page: page,\n      onPageChange: handleChangePage,\n      onRowsPerPageChange: handleChangeRowsPerPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n}\n_s(ColumnGroupingTable, \"65nbIEELuFY2eeUXbED/8VsHrEQ=\");\n_c = ColumnGroupingTable;\nvar _c;\n$RefreshReg$(_c, \"ColumnGroupingTable\");","map":{"version":3,"names":["React","Paper","Table","TableBody","TableCell","TableContainer","TableHead","TablePagination","TableRow","jsxDEV","_jsxDEV","columns","id","label","minWidth","align","format","value","toLocaleString","toFixed","createData","name","code","population","size","density","rows","ColumnGroupingTable","_s","page","setPage","useState","rowsPerPage","setRowsPerPage","handleChangePage","event","newPage","handleChangeRowsPerPage","target","sx","width","children","maxHeight","stickyHeader","map","column","style","top","fileName","_jsxFileName","lineNumber","columnNumber","slice","row","hover","role","tabIndex","rowsPerPageOptions","component","count","length","onPageChange","onRowsPerPageChange","_c","$RefreshReg$"],"sources":["D:/Task Management System/frontend/src/Components/Display.js"],"sourcesContent":["// import { useState,useEffect } from \"react\";\r\n// import axios from \"axios\";\r\n// import { useNavigate } from \"react-router-dom\"\r\n// import 'bootstrap/dist/css/bootstrap.min.css';\r\n// const Display=()=>{\r\n\r\n//   const mynav=useNavigate()\r\n//   const[taskData,setTaskData]=useState([])\r\n\r\n\r\n\r\n//   const [currentPage,setCurrentPage]= useState(1);\r\n//   const recordsperPage=5;\r\n//   const lastIndex = currentPage * recordsperPage;\r\n//   const firstIndex= lastIndex - recordsperPage;\r\n//   const records= taskData.slice(firstIndex,lastIndex);\r\n//   const npage= Math.ceil(taskData.length / recordsperPage);\r\n\r\n//   const numbers= [...Array(npage + 1).keys()].slice(1);\r\n\r\n\r\n\r\n//   const prevPage=()=>{\r\n//     if(currentPage!== 1){\r\n//       setCurrentPage(currentPage-1);\r\n//     }\r\n//   }\r\n\r\n\r\n//   const nextPage=()=>{\r\n//     if(currentPage!== npage){\r\n//       setCurrentPage(currentPage+1);\r\n//     }\r\n//   }\r\n\r\n\r\n//   const changeCPage=(id)=>{\r\n//     setCurrentPage(id);\r\n//   }\r\n\r\n\r\n\r\n\r\n//   const loadData=()=>{\r\n//           axios.get(\"http://localhost:8000/task/Display\").then((res)=>{\r\n//           setTaskData(res.data)\r\n//           })\r\n//   }\r\n\r\n//       useEffect(()=>{\r\n//           loadData()\r\n//       },[])\r\n\r\n      \r\n\r\n//       const handleToggleStatus = async (id, status) => {\r\n//           try {\r\n//             const newStatus = status === 'pending' ? 'completed': 'pending';\r\n//             const updatedTodo = await axios.put(`http://localhost:8000/task/Display/${id}`, { status: newStatus });\r\n//             setTaskData(taskData.map(todo => (todo._id === id ? updatedTodo.data : todo)));\r\n//           } catch (error) {\r\n//             console.error(error);\r\n//           }\r\n//         };\r\n\r\n\r\n//         const del = (id) => {\r\n        \r\n//           const confirmDelete = window.confirm(\"Are you sure you want to delete this item?\");\r\n      \r\n          \r\n//           if (confirmDelete) {\r\n              \r\n//               const url = \"http://localhost:8000/task/Delete\";\r\n              \r\n              \r\n//               axios.post(url, { id: id })\r\n//                   .then((res) => {\r\n                      \r\n//                       loadData();\r\n//                   })\r\n//                   .catch((error) => {\r\n//                       console.error(\"Error deleting item:\", error);\r\n//                   });\r\n//           }\r\n//       };\r\n      \r\n      \r\n      \r\n//       const edit=(id)=>{\r\n      \r\n//           mynav(\"/edit/\"+id); \r\n      \r\n//       }    \r\n\r\n//         const descriptionHere = ( description,date, descriptiondetail ) => {\r\n//       mynav(`/Des/${description}/${date}/${descriptiondetail}`);\r\n//     };\r\n      \r\n\r\n//   const mydata=records.map((key, index) => {\r\n\r\n//     return(\r\n//       <>\r\n          \r\n          \r\n              \r\n//                     <tbody>\r\n//                       <tr>\r\n                        \r\n//                         <td> { key.title}</td>\r\n//                         <td  onClick={()=>descriptionHere(key.description, key.date, key.descriptiondetail)}>{key.description}</td>\r\n//                         <td> {key.date}</td>\r\n                      \r\n//                         <td> \r\n//                         <div style={{display:\"flex\"}} >\r\n//                          {key.status}\r\n//                           <button  onClick={() => handleToggleStatus(key._id, key.status)} class=\"button\" style={{\"--clr\": \"#00ad54\"}}>\r\n//                                   <span ></span>\r\n//                                   <div >\r\n//                                       <div >\r\n//                                       <i  ></i>\r\n//                                       </div>\r\n//                                       <span>Status</span>\r\n//                                   </div>\r\n//                               </button>\r\n//                           </div></td>\r\n//                       <td><button onClick={()=>{edit(key._id)}} ><i  style={{color: \"#000000\"}}></i></button></td>\r\n//                       <td><button onClick={()=>{del(key._id)}}><i  style={{color: \"#000000\"}}></i></button></td>\r\n                \r\n//                   </tr>\r\n                  \r\n//               </tbody>\r\n            \r\n      \r\n    \r\n//       </>\r\n//     )\r\n    \r\n//   })\r\n\r\n\r\n      \r\n\r\n//       return(\r\n//           <>\r\n//           <center>\r\n//             <h1  >Assigned Tasks</h1> </center>\r\n//             <div  >\r\n//                 <div  style={{width:\"80%\",margin:\"auto\"}}>\r\n                  \r\n//                         <table class=\"table\">\r\n//                             <thead style={{color:\"white\",backgroundColor:\"#212529\"}}>\r\n//                                 <tr>\r\n//                                 <th>Title</th>\r\n//                                 <th style={{width:\" 150px\",height: \"40px\"}}>description</th>\r\n//                                 <th>date</th>\r\n//                                 <th>status</th>\r\n//                                 <th>Edit</th>\r\n//                                 <th>Delete</th>\r\n//                                 </tr>\r\n//                             </thead>\r\n//                       {mydata}   \r\n//               </table>\r\n          \r\n\r\n//                       <nav>\r\n//                         <ul className=\"pagination\">\r\n//                             <li className=\"page-item\">\r\n//                                 <a href=\"#\" className=\"page-link\" onClick={prevPage}>Prev</a>\r\n//                             </li>\r\n//                             {\r\n//                               numbers.map((n,i)=>(\r\n//                                 <li className={`page-item ${currentPage===n ? 'active':''}`} key={i}>\r\n//                                     <a href=\"#\" className=\"page-link\" onClick={()=>{changeCPage(n)}} >{n}</a>\r\n//                                 </li>\r\n//                               ))\r\n//                             }\r\n//                             <li className=\"page-item\">\r\n//                                 <a href=\"#\" className=\"page-link\" onClick={nextPage}>Next</a>\r\n//                             </li>\r\n//                         </ul>\r\n//                       </nav>\r\n//               </div>\r\n//             </div>\r\n            \r\n//                   <div style={{margin:\"100px\",padding:\"20px\"}}> \r\n                          \r\n//                   </div>\r\n            \r\n           \r\n\r\n//   </> \r\n// )}       \r\n\r\n// export default Display;\r\n\r\n\r\nimport * as React from 'react';\r\nimport Paper from '@mui/material/Paper';\r\nimport Table from '@mui/material/Table';\r\nimport TableBody from '@mui/material/TableBody';\r\nimport TableCell from '@mui/material/TableCell';\r\nimport TableContainer from '@mui/material/TableContainer';\r\nimport TableHead from '@mui/material/TableHead';\r\nimport TablePagination from '@mui/material/TablePagination';\r\nimport TableRow from '@mui/material/TableRow';\r\n\r\nconst columns = [\r\n  { id: 'name', label: 'Name', minWidth: 170 },\r\n  { id: 'code', label: 'ISO\\u00a0Code', minWidth: 100 },\r\n  {\r\n    id: 'population',\r\n    label: 'Population',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'size',\r\n    label: 'Size\\u00a0(km\\u00b2)',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toLocaleString('en-US'),\r\n  },\r\n  {\r\n    id: 'density',\r\n    label: 'Density',\r\n    minWidth: 170,\r\n    align: 'right',\r\n    format: (value) => value.toFixed(2),\r\n  },\r\n];\r\n\r\nfunction createData(name, code, population, size) {\r\n  const density = population / size;\r\n  return { name, code, population, size, density };\r\n}\r\n\r\nconst rows = [\r\n  createData('India', 'IN', 1324171354, 3287263),\r\n  createData('China', 'CN', 1403500365, 9596961),\r\n  createData('Italy', 'IT', 60483973, 301340),\r\n  createData('United States', 'US', 327167434, 9833520),\r\n  createData('Canada', 'CA', 37602103, 9984670),\r\n  createData('Australia', 'AU', 25475400, 7692024),\r\n  createData('Germany', 'DE', 83019200, 357578),\r\n  createData('Ireland', 'IE', 4857000, 70273),\r\n  createData('Mexico', 'MX', 126577691, 1972550),\r\n  createData('Japan', 'JP', 126317000, 377973),\r\n  createData('France', 'FR', 67022000, 640679),\r\n  createData('United Kingdom', 'GB', 67545757, 242495),\r\n  createData('Russia', 'RU', 146793744, 17098246),\r\n  createData('Nigeria', 'NG', 200962417, 923768),\r\n  createData('Brazil', 'BR', 210147125, 8515767),\r\n];\r\n\r\nexport default function ColumnGroupingTable() {\r\n  const [page, setPage] = React.useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <Paper sx={{ width: '100%' }}>\r\n      <TableContainer sx={{ maxHeight: 440 }}>\r\n        <Table stickyHeader aria-label=\"sticky table\">\r\n          <TableHead>\r\n         \r\n            <TableRow>\r\n              {columns.map((column) => (\r\n                <TableCell\r\n                  key={column.id}\r\n                  align={column.align}\r\n                  style={{ top: 57, minWidth: column.minWidth }}\r\n                >\r\n                  {column.label}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row) => {\r\n                return (\r\n                  <TableRow hover role=\"checkbox\" tabIndex={-1} key={row.code}>\r\n                    {columns.map((column) => {\r\n                      const value = row[column.id];\r\n                      return (\r\n                        <TableCell key={column.id} align={column.align}>\r\n                          {column.format && typeof value === 'number'\r\n                            ? column.format(value)\r\n                            : value}\r\n                        </TableCell>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[5, 25, 100]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  );\r\n}\r\n\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}